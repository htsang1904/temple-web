import { VueConstructor } from "vue";
declare global {
    interface Window {
        Vue: VueConstructor;
    }
}
declare const plugin: {
    Flicking: import("vue/types/vue").ExtendedVue<import("vue").default<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => import("vue").default<Record<string, any>, Record<string, any>, never, never, any>>, {
        vanillaFlicking: import("@egjs/flicking/declaration/Flicking").default;
        pluginsDiffer: import("@egjs/list-differ/declaration/ListDiffer").default<import("@egjs/flicking").Plugin>;
        slotDiffer: import("@egjs/list-differ/declaration/ListDiffer").default<import("vue").VNode>;
        diffResult: import("@egjs/list-differ").DiffResult<import("vue").VNode>;
    }, {
        _getSlots(): any;
        _fillKeys(): void;
        _bindEvents(): void;
        _checkPlugins(): void;
        _getPanels(h: import("vue").CreateElement, initialized: boolean): any;
        _getVirtualPanels(h: import("vue").CreateElement, initialized: boolean): any;
    }, unknown, {
        readonly viewportTag: string;
        readonly cameraTag: string;
        readonly cameraClass: string;
        readonly hideBeforeInit: boolean;
        readonly firstPanelSize: string;
        readonly options: Partial<import("@egjs/flicking").FlickingOptions>;
        readonly plugins: import("@egjs/flicking").Plugin[];
        readonly status: import("@egjs/flicking").Status;
    }, {}, import("vue/types/v3-component-options").ComponentOptionsMixin, import("vue/types/v3-component-options").ComponentOptionsMixin>;
    install: (Vue: VueConstructor) => void;
    version: string;
};
export default plugin;
